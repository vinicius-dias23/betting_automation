
#!/usr/bin/env python3
"""
Script de configura√ß√£o inicial do sistema
"""

import os
import sys
import subprocess
from pathlib import Path

def check_python_version():
    """Verifica vers√£o do Python"""
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio")
        print(f"Vers√£o atual: {sys.version}")
        return False
    print(f"‚úÖ Python {sys.version.split()[0]} OK")
    return True

def install_chrome():
    """Instala Chrome se necess√°rio"""
    try:
        # Verificar se Chrome j√° est√° instalado
        result = subprocess.run(['which', 'google-chrome'], capture_output=True)
        if result.returncode == 0:
            print("‚úÖ Chrome j√° instalado")
            return True
        
        print("üì• Instalando Chrome...")
        
        # Detectar sistema operacional
        if sys.platform.startswith('linux'):
            # Ubuntu/Debian
            commands = [
                ['wget', '-q', '-O', '-', 'https://dl.google.com/linux/linux_signing_key.pub'],
                ['sudo', 'apt-key', 'add', '-'],
                ['sudo', 'sh', '-c', 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" >> /etc/apt/sources.list.d/google-chrome.list'],
                ['sudo', 'apt-get', 'update'],
                ['sudo', 'apt-get', 'install', '-y', 'google-chrome-stable']
            ]
            
            for cmd in commands:
                result = subprocess.run(cmd, capture_output=True, text=True)
                if result.returncode != 0:
                    print(f"‚ùå Erro ao executar: {' '.join(cmd)}")
                    print(f"Erro: {result.stderr}")
                    return False
            
            print("‚úÖ Chrome instalado com sucesso")
            return True
        else:
            print("‚ùå Instala√ß√£o autom√°tica do Chrome n√£o suportada neste OS")
            print("Por favor, instale o Chrome manualmente")
            return False
            
    except Exception as e:
        print(f"‚ùå Erro ao instalar Chrome: {e}")
        return False

def create_virtual_environment():
    """Cria ambiente virtual"""
    try:
        if Path('venv').exists():
            print("‚úÖ Ambiente virtual j√° existe")
            return True
        
        print("üì¶ Criando ambiente virtual...")
        result = subprocess.run([sys.executable, '-m', 'venv', 'venv'], capture_output=True, text=True)
        
        if result.returncode != 0:
            print(f"‚ùå Erro ao criar ambiente virtual: {result.stderr}")
            return False
        
        print("‚úÖ Ambiente virtual criado")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao criar ambiente virtual: {e}")
        return False

def install_dependencies():
    """Instala depend√™ncias Python"""
    try:
        print("üì• Instalando depend√™ncias...")
        
        # Ativar ambiente virtual e instalar depend√™ncias
        if sys.platform.startswith('win'):
            pip_path = 'venv\\Scripts\\pip.exe'
        else:
            pip_path = 'venv/bin/pip'
        
        commands = [
            [pip_path, 'install', '--upgrade', 'pip'],
            [pip_path, 'install', '-r', 'requirements.txt']
        ]
        
        for cmd in commands:
            result = subprocess.run(cmd, capture_output=True, text=True)
            if result.returncode != 0:
                print(f"‚ùå Erro ao executar: {' '.join(cmd)}")
                print(f"Erro: {result.stderr}")
                return False
        
        print("‚úÖ Depend√™ncias instaladas")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False

def create_directories():
    """Cria diret√≥rios necess√°rios"""
    directories = ['logs', 'screenshots', 'chrome_profiles']
    
    for directory in directories:
        Path(directory).mkdir(exist_ok=True)
        print(f"‚úÖ Diret√≥rio {directory} criado")

def setup_config():
    """Configura arquivo .env"""
    if Path('.env').exists():
        print("‚úÖ Arquivo .env j√° existe")
        return True
    
    if not Path('.env.example').exists():
        print("‚ùå Arquivo .env.example n√£o encontrado")
        return False
    
    # Copiar .env.example para .env
    with open('.env.example', 'r') as src, open('.env', 'w') as dst:
        dst.write(src.read())
    
    print("‚úÖ Arquivo .env criado a partir do .env.example")
    print("")
    print("üîß IMPORTANTE: Configure o arquivo .env com suas credenciais!")
    print("   Edite os seguintes campos:")
    print("   - TELEGRAM_PHONE")
    print("   - TELEGRAM_GROUP_URL") 
    print("   - BET_SITE_USERNAME")
    print("   - BET_SITE_PASSWORD")
    print("   - BET_SITE_BASE_URL")
    
    return True

def main():
    """Fun√ß√£o principal de setup"""
    print("="*60)
    print("    CONFIGURA√á√ÉO DO SISTEMA DE AUTOMA√á√ÉO DE APOSTAS")
    print("="*60)
    
    steps = [
        ("Verificando Python", check_python_version),
        ("Criando diret√≥rios", create_directories),
        ("Criando ambiente virtual", create_virtual_environment),
        ("Instalando depend√™ncias", install_dependencies),
        ("Instalando Chrome", install_chrome),
        ("Configurando .env", setup_config),
    ]
    
    for step_name, step_func in steps:
        print(f"\n{step_name}...")
        if not step_func():
            print(f"‚ùå Falha em: {step_name}")
            sys.exit(1)
    
    print("\n" + "="*60)
    print("‚úÖ CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO!")
    print("="*60)
    print("\nüìã Pr√≥ximos passos:")
    print("1. Configure o arquivo .env com suas credenciais")
    print("2. Execute: ./run.sh")
    print("\n‚ö†Ô∏è  Lembre-se: Use por sua conta e risco!")

if __name__ == "__main__":
    main()
